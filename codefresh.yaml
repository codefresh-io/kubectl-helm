version: '1.0'
steps:

  define_the_versions_list:
    image: alpine
    commands:
      # previously built versions:
      # 3.0.0
      # 3.0.1
      # 3.0.2
      # 3.0.3
      # 3.1.0
      # 3.1.1
      # 3.1.2
      # 3.1.3
      # 3.2.0
      # 3.2.1
      # 3.2.2
      # 3.2.3
      # 3.2.4
      # 3.3.1
      # 3.4.1
      # 3.5.2
      # 3.6.0
      # 3.6.1
      # 3.6.2
      # 3.7.0
      # 3.7.1
      # 3.7.2
      # 3.8.0
      # 3.9.0
      # 3.9.1
      # 3.9.2
      # 3.9.3
      # 3.9.4
      # 3.10.0
      # 3.10.1
      # 3.10.2
      # 3.10.3
      # 3.11.0
      # 3.11.1
      # 3.11.2
      # 3.11.3
      # 3.12.0
      # 3.12.1
      # 3.12.2
      # 3.12.3
      # 3.13.0
      # 3.13.1
      - |- 
        cat <<EOF > helmVersionsList         
        3.13.2
        3.13.3
        3.14.0
        3.14.1
        3.14.2
        3.14.3
        3.14.4
    when:
      condition:
        all:
          notRecursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == true'

  run-cli-loop:
    image: codefresh/cli
    commands:
      - for VAR in $(cat helmVersionsList); do codefresh wait $(codefresh run ${{CF_PIPELINE_NAME}} -d --branch ${{CF_BRANCH}} --variable HELM_VERSION=${VAR} --trigger ${{CF_PIPELINE_TRIGGER_ID}} --context github-integration && sleep 10) & done
      - for j in $(jobs -p); do wait $j || (echo "Failed to build one of the images" && ! break); done
    when:
      condition:
        all:
          notRecursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == true'

  clone:
    type: git-clone
    arguments:
      repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      git: github-integration
      revision: '${{CF_REVISION}}'
      when:
        condition:
          all:
            recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'

  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: codefresh/kube-helm-debian
    working_directory: '${{clone}}'
    tag: '${{HELM_VERSION}}'
    build_arguments:
        - 'HELM_VERSION=${{HELM_VERSION}}'
    when:
      condition:
        all:
          recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'

  push_to_registry_with_branch:
    title: Pushing image to registry
    type: push
    candidate: ${{BuildingDockerImage}}
    tag: ${{HELM_VERSION}}
    when:
      condition:
        all:
          recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'
          masterBranch: 'match("${{CF_BRANCH}}", "^debian", true) == true'
    scale:
      push_to_dockerhub_with_branch:
        registry: dockerhub
      push_to_quay_with_branch:
        registry: quay-codefresh

  push_to_registry_with_dev_branch_tag:
    title: Pushing image to registry with dev branch tag
    type: push
    candidate: ${{BuildingDockerImage}}
    tag: ${{CF_BRANCH}}
    when:
      condition:
        all:
          recursivelyInvoked: 'includes("${{HELM_VERSION}}", "${{") == false'
          latestHelmVersion: "'${{HELM_VERSION}}' == '${{LATEST_VERSION}}'"
          notMasterBranch: "'${{CF_BRANCH}}' != 'debian'"
    scale:
      push_to_dockerhub_with_dev_branch:
        registry: dockerhub
      push_to_quay_with_dev_branch:
        registry: quay-codefresh

  push_latest:
    type: push
    registry: dockerhub
    tag: latest
    candidate: ${{BuildingDockerImage}}
    when:
      condition:
        all:
          latestHelmVersion: "'${{HELM_VERSION}}' == '${{LATEST_VERSION}}'"
          masterBranch: "'${{CF_BRANCH}}' == 'debian'"
    scale:
      push_to_dockerhub_latest:
        registry: dockerhub
      push_to_quay_latest:
        registry: quay-codefresh
